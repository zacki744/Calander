-- MySQL Script generated by MySQL Workbench
-- Tue Aug 30 18:21:46 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema kalender
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `kalender` ;

-- -----------------------------------------------------
-- Schema kalender
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `kalender` DEFAULT CHARACTER SET utf8mb4 ;
USE `kalender` ;

-- -----------------------------------------------------
-- Table `kalender`.`taskManager`
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Table `kalender`.`taskManager`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `kalender`.`taskManager` ;

CREATE TABLE IF NOT EXISTS `kalender`.`taskManager` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `Title` VARCHAR(45) NULL,
  `Category` VARCHAR(45) NULL,
  `Description` VARCHAR(500) NULL,
  `StartingTime` DATETIME NULL,
  `Deadline` DATETIME NULL,
  `WTstart` DATETIME NULL,
  `WTend` DATETIME NULL,
  `EstimatedDuration` INT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

CREATE TABLE IF NOT EXISTS `kalender`.`completed` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `Title` VARCHAR(45) NULL,
  `Category` VARCHAR(45) NULL,
  `Description` VARCHAR(500) NULL,
  `StartingTime` DATETIME NULL,
  `Deadline` DATETIME NULL,
  `EstimatedDuration` INT NULL,
  `ActualDuration` INT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

--
-- inserts a objekt in kalender
--
DROP PROCEDURE IF EXISTS `kalender`.`insertInto`;
DELIMITER ;;
CREATE PROCEDURE `kalender`.`insertInto`
(
	`f_Description`  VARCHAR(500),
    `f_Title` VARCHAR(45),
    `f_Category` VARCHAR(45),
    `f_StartingTime` DATETIME,
    `f_Deadline` DATETIME,
    `f_EstimatedDuration` INT,
    `f_WTstart` DATETIME,
    `f_WTend` DATETIME
)
BEGIN
	INSERT INTO `kalender`.`taskManager` (`Description`, `StartingTime`, `Deadline`, `EstimatedDuration`, `Category`, `Title`, `WTstart`, `WTend`)
	values(`f_Description`, `f_StartingTime` ,`f_Deadline`, `f_EstimatedDuration`, `f_Category`, `f_Title`, `f_WTstart`, `f_WTend`);
        
END
;;
DELIMITER ;

--
-- returns all where id = id
--
DROP PROCEDURE IF EXISTS SELECT_ALL_WHERE;
DELIMITER ;;

CREATE PROCEDURE SELECT_ALL_WHERE
(
_id INT
)
BEGIN
	SELECT DATE_FORMAT(StartingTime, '%Y-%m-%d %H:%i:%s') AS 
    start, DATE_FORMAT(Deadline, '%Y-%m-%d %H:%i:%s') AS end, 
    Description, id, EstimatedDuration, Title, Category 
	FROM  `kalender`.`taskManager` WHERE `id` = _id;
END
;;
DELIMITER ;

--
-- returns all where 
--
DROP PROCEDURE IF EXISTS SELECT_ALL;
DELIMITER ;;

CREATE PROCEDURE SELECT_ALL()
BEGIN
	SELECT id, DATE_FORMAT(StartingTime, '%Y-%m-%d %H:%i:%s') AS
    start, DATE_FORMAT(Deadline, '%Y-%m-%d %H:%i:%s') AS end,
	DATE_FORMAT(WTstart, '%Y-%m-%d %H:%i:%s') AS WTstart,
    DATE_FORMAT(WTend, '%Y-%m-%d %H:%i:%s') AS WTend,
    Description, id, EstimatedDuration, Title, Category  
	FROM  `kalender`.`taskManager`;
END
;;
DELIMITER ;

--
-- returns all where 
--
DROP PROCEDURE IF EXISTS SELECT_ALL_HOME;
DELIMITER ;;

CREATE PROCEDURE SELECT_ALL_HOME()
BEGIN
	SELECT 
    id,
	DATE_FORMAT(Deadline, '%M-%d') AS end,
	DATE_FORMAT(WTstart, '%m-%d') AS WTstart,
    DATE_FORMAT(WTend, '%m-%d') AS WTend,
    Description,
    EstimatedDuration,
    Title,
    Category  
	FROM  `kalender`.`taskManager`;
END
;;
DELIMITER ;

--
-- updates a objekt
--
DROP PROCEDURE IF EXISTS `kalender`.`uppdate_objekt`;
DELIMITER ;;
CREATE PROCEDURE `kalender`.`uppdate_objekt`
(
	`f_id` INT,
	`f_Description`  VARCHAR(500),
    `f_Title` VARCHAR(45),
    `f_Category` VARCHAR(45),
    `f_StartingTime` DATETIME,
    `f_Deadline` DATETIME,
    `f_EstimatedDuration` INT
)
BEGIN
	UPDATE `kalender`.`taskManager` SET `Description` = `f_Description`,
    `StartingTime` = `f_StartingTime`,
    `Deadline` = `f_Deadline`,
    `EstimatedDuration` = `f_EstimatedDuration`,
    `Title` = `f_Title`,
	`Category` = `f_Category`
    WHERE
		`id` = `f_id`;
        
END
;;
DELIMITER ;

--
-- updates a objekt
--
DROP PROCEDURE IF EXISTS delete_object;
DELIMITER ;;
CREATE PROCEDURE delete_object
(
_id INT
)
BEGIN
		DELETE FROM  `kalender`.`taskManager` WHERE `id` = _id;
END
;;
DELIMITER ;

--
-- returns all for gant formated 
--
DROP PROCEDURE IF EXISTS SELECT_ALL_for_gant;
DELIMITER ;;

CREATE PROCEDURE SELECT_ALL_for_gant()
BEGIN
	SELECT 
    id,
    Title AS name, 
    DATE_FORMAT(WTstart, '%Y-%m-%d %H:%i:%s') AS actualStart, 
    DATE_FORMAT(WTend, '%Y-%m-%d %H:%i:%s') AS actualEnd,
    Description
	FROM  `kalender`.`taskManager`;
END
;;
DELIMITER ;

--
-- returns all of complete formated 
--
DROP PROCEDURE IF EXISTS SELECT_ALL_COMPLETE;
DELIMITER ;;

CREATE PROCEDURE SELECT_ALL_COMPLETE()
BEGIN
	SELECT DATE_FORMAT(StartingTime, '%Y-%m-%d %H:%i:%s') AS 
    start, DATE_FORMAT(Deadline, '%Y-%m-%d %H:%i:%s') AS end, 
    Description, id, EstimatedDuration, ActualDuration, Title, Category
	FROM  `kalender`.`completed`;
END
;;
DELIMITER ;

--
-- MOVES A OBJECT TO COMPLETE
--
DROP PROCEDURE IF EXISTS COMPLETE_OBJ;
DELIMITER ;;

CREATE PROCEDURE COMPLETE_OBJ
(
	_ID INT,
    f_actualduration INT
)
BEGIN
	INSERT INTO `kalender`.`completed` (
		`id`, 
		`Title`, 
		`Category`,
		`Description`,
		`StartingTime`,
		`Deadline`,
		`EstimatedDuration`
	) 
	SELECT 
		`id`, 
		`Title`, 
		`Category`,
		`Description`,
		`StartingTime`,
		`Deadline`,
		`EstimatedDuration`
	FROM `kalender`.`taskManager` WHERE _ID = `id`;
	UPDATE `kalender`.`completed` SET `ActualDuration` = f_actualduration WHERE _ID = `id`;
    DELETE FROM `kalender`.`taskManager` WHERE _ID = `id`;
END
;;
DELIMITER ;

--
-- serch
--
DROP PROCEDURE IF EXISTS serch;
DELIMITER ;;

CREATE PROCEDURE serch
(
	Serchterm VARCHAR(45)
)
BEGIN
	SELECT DATE_FORMAT(StartingTime, '%Y-%m-%d %H:%i:%s') AS 
    start, DATE_FORMAT(Deadline, '%Y-%m-%d %H:%i:%s') AS end, 
    Description, id, EstimatedDuration, Title, Category 
	FROM  `kalender`.`taskManager` WHERE  Title LIKE Serchterm OR Category LIKE Serchterm OR Description LIKE Serchterm;
END
;;
DELIMITER ;

--
-- serch completed
--
DROP PROCEDURE IF EXISTS serch_completed;
DELIMITER ;;

CREATE PROCEDURE serch_completed
(
	Serchterm VARCHAR(45)
)
BEGIN
	SELECT DATE_FORMAT(StartingTime, '%Y-%m-%d %H:%i:%s') AS 
    start, DATE_FORMAT(Deadline, '%Y-%m-%d %H:%i:%s') AS end, 
    Description, id, EstimatedDuration, Title, Category 
	FROM  `kalender`.`completed` WHERE  Title LIKE Serchterm OR Category LIKE Serchterm OR Description LIKE Serchterm;
END
;;
DELIMITER ;

--
-- updates time for objekt by id
--
DROP PROCEDURE IF EXISTS Uppdate_WTwork;
DELIMITER ;;
CREATE PROCEDURE Uppdate_WTwork
(
	`f_id` INT,
    `f_Deadline` DATETIME,
    `f_EstimatedDuration` INT
)
BEGIN
	UPDATE `kalender`.`taskManager` SET
    `WTend` = `f_Deadline`,
    `EstimatedDuration` = `f_EstimatedDuration`
    WHERE
		`id` = `f_id`;
        
END
;;
DELIMITER ;



--
-- delete from complete
--
DROP PROCEDURE IF EXISTS COMPLETE_DELETE;
DELIMITER ;;
CREATE PROCEDURE COMPLETE_DELETE
(
	_ID INT

)
BEGIN
	DELETE FROM `kalender`.`completed` WHERE _ID = `id`;
        
END
;;
DELIMITER ;
